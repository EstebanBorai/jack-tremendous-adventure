pub mod plugin;

use bevy::prelude::{
  AssetServer, Assets, Commands, Component, Entity, Input, KeyCode, Query, Res, ResMut,
  Transform, Vec2, With, Without, error,
};
use bevy::sprite::{SpriteSheetBundle, TextureAtlasSprite};
use bevy::time::Time;

use crate::component::jump::{Jump, FALL_SPEED};
use crate::component::speed::Speed;

use self::plugin::animation::PlayerAnimation;
use self::plugin::input::PlayerInputPlugin;

const MASK_DUDE_IDLE_32X32: &str = "Main Characters/Mask Dude/Idle (32x32).png";

const REGULAR_JUMP_FORCE: f32 = 25.;

#[derive(Debug, Component)]
pub struct Player;

impl Player {
  pub fn spawn(
      mut commands: Commands,
      animations: Res<PlayerAnimation>
  ) {
      if let Some((texture_atlas, animation)) = animations.get(crate::plugin::animation::Animation::Idle) {
          commands.spawn((
              SpriteSheetBundle {
                  texture_atlas,
                  sprite: TextureAtlasSprite::new(0),
                  ..Default::default()
              },
              Player,
              Speed(100.),
          ));
      } else {
          error!("Could not find the idle animation for the player!")
      }

  }

  pub fn jump(
      mut commands: Commands,
      time: Res<Time>,
      mut player: Query<(Entity, &mut Transform, &mut Jump), With<Player>>,
  ) {
      // Get player only if it has a jump component, `Jump` component is available
      // only when the user is jumping.
      if let Ok(player) = player.get_single_mut() {
          let (entity, mut transform, mut jump) = player;
          let jump_power = (time.delta_seconds() * FALL_SPEED * 2.).min(jump.0);

          jump.0 -= jump_power;
          transform.translation.y += jump_power;

          if jump.0 == 0. {
              commands.entity(entity).remove::<Jump>();
          }
      }
  }

  pub fn fall(mut player: Query<&mut Transform, (With<Player>, Without<Jump>)>, time: Res<Time>) {
      if let Ok(mut player) = player.get_single_mut() {
          // If the player is in the air we reduce the `y` position by `FALL_SPEED`
          // on every frame until it reaches the ground. (0.)
          if player.translation.y > 0. {
              player.translation.y -= time.delta_seconds() * FALL_SPEED;

              if player.translation.y < 0. {
                  player.translation.y = 0.;
              }
          }
      }
  }
}
